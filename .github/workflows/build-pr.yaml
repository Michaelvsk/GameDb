name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis


      # Versioning
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Versioning project's csproj file
        run: |
          
          $cprojFiles = @( `
            "./GameDb/GameDb.csproj",
            "./GameDb.Core/GameDb.Core.csproj", 
            "./GameDb.Models/GameDb.Models.csproj"
          )

          foreach($proj in $cprojFiles) {
            $versionNo = Select-Xml -XPath "/Project/PropertyGroup/Version" -Path $proj | %{$_.node.InnerXML}
          
            # if fails to extract version number, then let workflow fail
            Write-Host "Extracted version is: $versionNo"
            if ($versionNo -eq $null) {
              Write-Host "::error ::Failed to read version number from project file."
              exit 1
            }              
            
            # append build number if requested
            if ($env:GITHUB_REF_NAME -ne "main") {
              Write-Host "Appending build number to version"
              $versionNo="$versionNo.$env:GITHUB_RUN_ID"
            }
            Write-Host "Using version '$versionNo' for this build artifact"
            Add-Content $GITHUB_ENV "artifact_version=$versionNo"
          }

          
      # Prepare SonarCloud
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

          
      # Build Project
      - name: Restore project
        run: |
          Write-Host "${{ env.artifact_version }}"
          
          dotnet workload restore
          dotnet restore

          Write-Host $env:artifact_version

      #- name: Init SonarCloud Analyzer
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: >
      #    .\.sonar\scanner\dotnet-sonarscanner begin
      #    /k:"Michaelvsk_GameDb"
      #    /o:"github-michaelvsk"
      #    /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      #    /d:sonar.host.url="https://sonarcloud.io"
      #    /d:sonar.projectVersion=$env:artifact_version

      - name: Build Project
        run: dotnet build -c Release

      #- name: Finish SonarCloud Analyzer
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
